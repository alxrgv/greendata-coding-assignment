{"version":3,"sources":["store/models/Employee.ts","store/models/index.ts","store/initial/positions.ts","store/features/positions/positions.ts","store/features/positions/selectors.ts","store/features/employees/employees.ts","store/features/employees/selectors.ts","components/RandomizeButton/index.tsx","components/AppHeader/index.tsx","components/EmployeesList/config.ts","components/EmployeesList/TableRow.tsx","components/EmployeesList/index.tsx","components/EmployeeInformation/state.ts","components/EmployeeInformation/context.ts","components/EmployeeInformation/TabPanel.tsx","components/EmployeeInformation/ColleaguesTab.tsx","components/EmployeeInformation/DescriptionTab.tsx","components/EmployeeInformation/Controls.tsx","components/EmployeeInformation/index.tsx","store/index.ts","App.tsx","index.tsx"],"names":["ColleagueState","IsFiredState","Gender","EMPTY_ID","EMPTY_EMPLOYEE","id","fullname","position","birthday","gender","Unknown","isFired","No","colleagues","itGrades","developerTypes","analystGrades","headAndAlternate","generateHeadAndAlternate","name","map","ha","positionsInitialState","mapped","grade","developerType","Array","prototype","concat","apply","generateDevelopers","reduce","acc","value","nanoid","entities","ids","push","positionsAdapter","createEntityAdapter","sortComparer","a","b","localeCompare","reducer","createSlice","initialState","getInitialState","reducers","getSelectors","selectAllPositions","selectById","selectAll","employeeAdapter","createEmployeeAction","createAction","employee","payload","createManyEmployeeAction","removeEmployeeAction","updateEmployeeAction","markEmployeeIdAsSelectedAction","selectedEmployeeId","extraReducers","builder","addCase","state","addOne","addMany","Object","keys","entityKey","entity","filteredColleagues","filter","length","removeOne","changes","colleagueId","Added","updateOne","selectors","employeeEntitiesSelector","employees","positionEntitiesSelector","positions","denormalizeEmployee","emp","employeeEntities","positionEntites","employeePosition","colleagueKey","colleague","colleaguePosition","selectDenormalizedEmployee","createSelector","store","employeeFromProps","selectAllDenormalizedEmployees","employeeKey","selectedEmployeeSelector","selectedEmployeeIdSelector","selectAllEmployees","useStyles","selectTotal","makeStyles","theme","absolute","bottom","spacing","left","RandomizeButton","classes","dispatch","useDispatch","availablePositions","useSelector","generateRandomEmployees","Faker","employeeCount","Math","floor","random","index","sex","number","min","max","firstName","lastName","arrayElement","date","between","boolean","Yes","Male","Female","item","round","Tooltip","title","Fab","color","className","onClick","header","marginBottom","AppHeader","props","AppBar","Toolbar","variant","Typography","mainTableConfig","key","cellAlign","titleAlign","selector","render","isDate","format","locale","ru","nestedTableConfig","useRowStyles","root","cursor","noGutters","paddingBottom","paddingTop","TableRow","data","currentDenormalizedEmployee","React","useState","expanded","expand","toggle","useCallback","useEffect","colleaguesKeys","Fragment","selected","hover","TableCell","IconButton","size","cell","align","colSpan","Collapse","in","timeout","Box","margin","gutterBottom","component","Table","TableHead","TableBody","scope","listContainer","maxHeight","overflow","EmployeesList","Paper","stickyHeader","display","flexDirection","height","padding","justifyContent","alignItems","textAlign","whyDidYouRender","clearPendingEmployeeAction","updatePendingEmployeeAction","employeeInfoReducer","createReducer","assign","currentTab","pendingEmployee","EmployeeInformationContext","createContext","useEmployeeInformation","useContext","tabPanelContainer","flex","tabPanel","right","top","TabPanel","children","other","isHidden","hidden","card","cardHeader","list","width","ColleaguesTab","localDispatch","selectedEmployee","employeesCount","isEditingSelectedEmployee","Card","elevation","CardHeader","subheader","Divider","List","ListItem","ListItemIcon","Checkbox","disableRipple","checked","indexOf","onChange","target","Removed","ListItemText","primary","secondary","DescriptionTab","currentEmployee","fullnameFilled","positionFilled","Grid","container","xs","FormControl","fullWidth","required","error","FormLabel","Input","FormHelperText","Select","displayEmpty","MenuItem","label","disableMaskedInput","showDaysOutsideCurrentMonth","minDate","Date","maxDate","renderInput","TextField","helperText","inputFormat","RadioGroup","row","FormControlLabel","control","Radio","box","gutter","marginRight","ControlsBase","canCreateEmployee","canClear","clsx","Button","disabled","Controls","memo","infoContainer","minHeight","EmployeeInformationContextProvider","Provider","EmployeeInformation","setCurrentTab","useReducer","Tabs","centered","event","newValue","Tab","wrapped","configureStore","employeeReducer","positionReducer","middleware","getDefaultMiddleware","thunk","immutableCheck","serializableCheck","paddingLeft","paddingRight","employeeListItem","bottomGutter","App","LocalizationProvider","dateAdapter","DateFnsUtils","sm","fullscreen","baseTheme","createMuiTheme","overrides","MuiCssBaseline","html","body","AppContainer","ThemeProvider","CssBaseline","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.118d38c1.chunk.js","sourcesContent":["import type { EntityBase } from \"./EntityBase\";\nimport type { EmployeePosition, EmployeePositionId } from \"./EmployeePosition\";\n\nexport type EmployeeId = string;\n\nexport enum ColleagueState {\n  Added,\n  Removed,\n}\nexport enum IsFiredState {\n  No,\n  Yes,\n}\nexport enum Gender {\n  Male,\n  Female,\n  Unknown,\n}\n\nexport interface Employee extends EntityBase<EmployeeId> {\n  fullname: string;\n  position: EmployeePosition;\n  birthday: Date | null;\n  gender: Gender;\n  isFired: IsFiredState;\n  colleagues: Record<string, Employee>;\n}\n\nexport interface EmployeeEntity\n  extends Omit<Employee, \"position\" | \"colleagues\"> {\n  position: EmployeePositionId;\n  colleagues: EmployeeId[];\n}\n\nexport const EMPTY_ID = \"\";\nexport const EMPTY_EMPLOYEE: EmployeeEntity = {\n  id: EMPTY_ID,\n  fullname: \"\",\n  position: \"\",\n  birthday: null,\n  gender: Gender.Unknown,\n  isFired: IsFiredState.No,\n  colleagues: [],\n};\n","export * from \"./Employee\";\nexport * from \"./EmployeePosition\";\n","const itGrades = [\"Junior\", \"Middle\", \"Senior\"];\nconst developerTypes = [\"Frontend\", \"Backend\", \"iOS\", \"Android\"];\nconst analystGrades = [\"Стажёр\", \"Младший\", \"Старший\"];\nconst headAndAlternate = [\"Руководитель\", \"Заместитель руководителя\"];\n\nfunction generateHeadAndAlternate(name: string) {\n  return headAndAlternate.map((ha) => `${ha} ${name}`);\n}\n\nfunction generateDevelopers() {\n  const mapped = itGrades.map((grade) =>\n    developerTypes.map((developerType) => {\n      return `${grade} ${developerType} разработчик`;\n    })\n  );\n\n  return Array.prototype.concat.apply([], mapped);\n}\n\nfunction generateAnalysts() {\n  return analystGrades.map((grade) => `${grade} аналитик`);\n}\n\nexport const positions = [\n  \"Директор\",\n  \"Заместитель директора\",\n  ...generateHeadAndAlternate(\"экономического отдела\"),\n  ...generateHeadAndAlternate(\"отдела маркетинга\"),\n  ...generateHeadAndAlternate(\"бухгалтерского отдела\"),\n  \"Руководитель команды разработки\",\n  ...generateDevelopers(),\n  ...generateAnalysts(),\n];\n","import { nanoid } from \"nanoid\";\nimport { createEntityAdapter, createSlice } from \"@reduxjs/toolkit\";\n\nimport type { EmployeePositionEntity } from \"store/models\";\n\nimport { positions } from \"store/initial\";\n\nconst positionsInitialState: {\n  ids: number[];\n  entities: string[];\n} = positions.reduce(\n  (acc, value) => {\n    const id = nanoid();\n\n    acc.entities[id] = { id, value };\n    acc.ids.push(id);\n\n    return acc;\n  },\n  { ids: [], entities: {} }\n);\n\nexport const positionsAdapter = createEntityAdapter<EmployeePositionEntity>({\n  sortComparer: (a, b) => a.value.localeCompare(b.value),\n});\n\nexport const { reducer } = createSlice({\n  name: \"positions\",\n  initialState: positionsAdapter.getInitialState({\n    ...positionsInitialState,\n  }),\n  reducers: {},\n});\n\nexport type PositionsReducer = typeof reducer;\n","import { positionsAdapter } from \"./positions\";\n\nexport const {\n  selectById: selectPositionById,\n  selectAll: selectAllPositions,\n} = positionsAdapter.getSelectors();\n","import { nanoid } from \"nanoid\";\nimport {\n  createAction,\n  createEntityAdapter,\n  createSlice,\n} from \"@reduxjs/toolkit\";\n\nimport type { Update } from \"@reduxjs/toolkit\";\nimport type { EmployeeEntity, EmployeeId } from \"store/models\";\n\nimport { ColleagueState } from \"store/models\";\n\nexport const employeeAdapter = createEntityAdapter<EmployeeEntity>({\n  sortComparer: (a, b) => a.fullname.localeCompare(b.fullname),\n});\n\nexport const createEmployeeAction = createAction(\n  \"employee/add\",\n  (employee: EmployeeEntity) => ({\n    payload: ({\n      ...employee,\n      ...(employee.id === \"\" && { id: nanoid() }),\n    } as any) as EmployeeEntity,\n  })\n);\nexport const createManyEmployeeAction = createAction<EmployeeEntity[]>(\n  \"employee/addMany\"\n);\nexport const removeEmployeeAction = createAction<EmployeeId>(\"employee/remove\");\n\nexport type ColleaguesUpdate = {\n  colleagues: {\n    id: EmployeeId;\n    state: ColleagueState;\n  };\n};\nexport type EmployeeWithoutColleagues = Omit<EmployeeEntity, \"colleagues\">;\nexport type EmployeeUpdate =\n  | Update<EmployeeWithoutColleagues>\n  | Update<ColleaguesUpdate>;\nexport const updateEmployeeAction = createAction<EmployeeUpdate>(\n  \"employee/update\"\n);\nexport const markEmployeeIdAsSelectedAction = createAction<\n  EmployeeId | EmployeeEntity\n>(\"employee/select\");\n\nexport const { reducer } = createSlice({\n  name: \"employees\",\n  initialState: {\n    ...employeeAdapter.getInitialState({\n      selectedEmployeeId: \"\",\n    }),\n  },\n  reducers: {},\n  extraReducers: (builder) => {\n    builder\n      .addCase(createEmployeeAction, (state, { payload }) => {\n        employeeAdapter.addOne(state, payload);\n\n        state.selectedEmployeeId = payload.id;\n      })\n      .addCase(createManyEmployeeAction, (state, { payload }) => {\n        employeeAdapter.addMany(state, payload);\n      })\n      .addCase(removeEmployeeAction, (state, { payload }) => {\n        state.selectedEmployeeId = \"\";\n\n        // remove all entries pointing to employee\n        // eslint-disable-next-line array-callback-return\n        Object.keys(state.entities).map((entityKey) => {\n          const entity = state.entities[entityKey]!;\n\n          const filteredColleagues = entity.colleagues.filter(\n            (id) => id !== payload\n          );\n\n          if (filteredColleagues.length !== entity.colleagues.length) {\n            entity.colleagues = filteredColleagues;\n          }\n        });\n\n        employeeAdapter.removeOne(state, payload);\n      })\n      .addCase(updateEmployeeAction, (state, { payload }) => {\n        const { id, changes } = payload;\n\n        if (\"colleagues\" in changes) {\n          const {\n            id: colleagueId,\n            state: colleagueState,\n          } = changes.colleagues!;\n\n          if (colleagueState === ColleagueState.Added) {\n            state.entities[id]!.colleagues.push(colleagueId);\n          } else {\n            state.entities[id]!.colleagues = state.entities[\n              id\n            ]!.colleagues.filter((id) => id !== colleagueId);\n          }\n        } else {\n          employeeAdapter.updateOne(\n            state,\n            payload as Update<EmployeeWithoutColleagues>\n          );\n        }\n      })\n      .addCase(markEmployeeIdAsSelectedAction, (state, { payload }) => {\n        if (typeof payload === \"string\") {\n          state.selectedEmployeeId = payload;\n        } else {\n          state.selectedEmployeeId = payload.id;\n        }\n      });\n  },\n});\n\nexport type EmployeeSliceReducer = typeof reducer;\n","import { createSelector, Dictionary } from \"@reduxjs/toolkit\";\n\nimport type { StoreState } from \"store\";\nimport type {\n  EmployeeId,\n  EmployeeEntity,\n  EmployeePositionEntity,\n} from \"store/models\";\n\nimport { employeeAdapter } from \"./employees\";\nimport { EMPTY_ID, EMPTY_EMPLOYEE } from \"store/models\";\nimport { reducer } from \"./employees\";\n\nconst selectors = employeeAdapter.getSelectors();\n\nconst getEmployeeFromProps = (store: StoreState, employee: EmployeeEntity) =>\n  employee;\nconst employeeEntitiesSelector = (state: StoreState) =>\n  state.employees.entities;\nconst positionEntitiesSelector = (state: StoreState) =>\n  state.positions.entities;\n\nconst denormalizeEmployee = (\n  emp: EmployeeEntity,\n  employeeEntities: Dictionary<EmployeeEntity>,\n  positionEntites: Dictionary<EmployeePositionEntity>\n) => {\n  const employeePosition = positionEntites[emp.position]!.value;\n  const colleagues = emp.colleagues.reduce((acc, colleagueKey) => {\n    const { colleagues, ...colleague } = employeeEntities[colleagueKey]!;\n    const colleaguePosition = positionEntites[colleague.position]!.value;\n\n    (acc as any)[colleagueKey] = {\n      ...colleague,\n      position: colleaguePosition,\n    };\n    return acc;\n  }, {});\n\n  return {\n    ...emp,\n    position: employeePosition,\n    colleagues,\n  };\n};\n\nexport const selectDenormalizedEmployee = createSelector(\n  employeeEntitiesSelector,\n  positionEntitiesSelector,\n  getEmployeeFromProps,\n  (\n    employeeEntities: Dictionary<EmployeeEntity>,\n    positionEntites: Dictionary<EmployeePositionEntity>,\n    employeeFromProps: EmployeeEntity\n  ) => {\n    return denormalizeEmployee(\n      employeeFromProps,\n      employeeEntities,\n      positionEntites\n    );\n  }\n);\nexport const selectAllDenormalizedEmployees = createSelector(\n  employeeEntitiesSelector,\n  positionEntitiesSelector,\n  (\n    employeeEntities: Dictionary<EmployeeEntity>,\n    positionEntites: Dictionary<EmployeePositionEntity>\n  ) => {\n    return Object.keys(employeeEntities)!.map((employeeKey: EmployeeId) =>\n      denormalizeEmployee(\n        employeeEntities[employeeKey]!,\n        employeeEntities,\n        positionEntites\n      )\n    );\n  }\n);\n\nexport const isSomeoneSelectedSelector = (state: ReturnType<typeof reducer>) =>\n  state.selectedEmployeeId !== EMPTY_ID;\nexport const selectedEmployeeSelector = (state: ReturnType<typeof reducer>) => {\n  if (state.selectedEmployeeId === EMPTY_ID) {\n    return EMPTY_EMPLOYEE;\n  }\n\n  return state.entities[state.selectedEmployeeId];\n};\nexport const selectedEmployeeIdSelector = (state: ReturnType<typeof reducer>) =>\n  state.selectedEmployeeId;\n\nexport const selectEmployeeById = selectors.selectById;\nexport const selectAllEmployees = selectors.selectAll;\nexport const selectTotalEmployees = selectors.selectTotal;\n","import React from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Fab, Tooltip, makeStyles } from \"@material-ui/core\";\nimport { nanoid } from \"nanoid\";\nimport Autorenew from \"@material-ui/icons/Autorenew\";\n\nimport type { StoreState } from \"store\";\nimport type { EmployeePositionEntity, EmployeeEntity } from \"store/models\";\n\nimport { Gender, IsFiredState } from \"store/models\";\nimport { selectAllPositions } from \"store/features/positions\";\nimport { createManyEmployeeAction } from \"store/features/employees\";\n\nconst useStyles = makeStyles((theme) => ({\n  absolute: {\n    position: \"fixed\",\n    bottom: theme.spacing(2),\n    left: theme.spacing(2),\n  },\n}));\n\nfunction RandomizeButton() {\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const availablePositions = useSelector<StoreState>((state) =>\n    selectAllPositions(state.positions)\n  ) as EmployeePositionEntity[];\n\n  const generateRandomEmployees = async () => {\n    const Faker = await import(\"faker/locale/ru\");\n\n    const min = 3;\n    const max = 10;\n    const employeeCount = Math.floor(Math.random() * (max - min + 1) + min);\n\n    const employees: EmployeeEntity[] = [];\n    for (let index = 0; index < employeeCount; index++) {\n      const sex = Faker.random.number({\n        min: 0,\n        max: 1,\n      });\n      const fullname = `${Faker.name.firstName(sex)} ${Faker.name.lastName(\n        sex\n      )}`;\n      const position = Faker.random.arrayElement(availablePositions);\n      const birthday = Faker.date.between(\"01/01/1950\", \"01/01/2002\");\n      const isFired = Faker.random.boolean();\n\n      employees.push({\n        id: nanoid(36),\n        fullname,\n        birthday,\n        isFired: isFired ? IsFiredState.Yes : IsFiredState.No,\n        position: position.id,\n        gender: sex === 0 ? Gender.Male : Gender.Female,\n        colleagues: null as any,\n      });\n    }\n\n    for (let index = 0; index < employees.length; index++) {\n      const employee = employees[index];\n\n      const colleagues = employees.reduce(\n        (acc: EmployeeEntity[\"id\"][], item) => {\n          if (Math.round(Math.random()) || item.id === employee.id) {\n            return acc;\n          }\n\n          return acc.concat(item.id);\n        },\n        []\n      );\n      employee.colleagues = colleagues;\n    }\n\n    dispatch(createManyEmployeeAction(employees));\n  };\n\n  return (\n    <Tooltip title=\"Заполнить случайными значениями\">\n      <Fab\n        color=\"primary\"\n        className={classes.absolute}\n        onClick={generateRandomEmployees}\n      >\n        <Autorenew />\n      </Fab>\n    </Tooltip>\n  );\n}\n\nexport { RandomizeButton };\n","import React from \"react\";\nimport { AppBar, Toolbar, Typography, makeStyles } from \"@material-ui/core\";\n\nimport type { WithoutChildren } from \"types/children\";\n\nconst useStyles = makeStyles((theme) => ({\n  header: {\n    marginBottom: theme.spacing(2),\n  },\n}));\n\nfunction AppHeader(props: WithoutChildren) {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.header}>\n      <AppBar position=\"static\">\n        <Toolbar variant=\"dense\">\n          <Typography variant=\"h6\" color=\"inherit\">\n            Список сотрудников\n          </Typography>\n        </Toolbar>\n      </AppBar>\n    </div>\n  );\n}\n\nexport { AppHeader };\n","import { format, isDate } from \"date-fns\";\nimport { ru } from \"date-fns/locale\";\n\nimport type { ReactNode } from \"react\";\nimport type { TableCellProps } from \"@material-ui/core\";\nimport type { Employee } from \"store/models\";\nimport type { PropTypeExtractor } from \"types/global\";\n\nimport { Gender } from \"store/models\";\n\nexport interface CellConfig {\n  key: string;\n  title: string;\n  cellAlign: TableCellProps[\"align\"];\n  titleAlign: TableCellProps[\"align\"];\n  selector: (emp: Employee) => PropTypeExtractor<Employee>;\n  render: (value: any) => ReactNode;\n}\n\nconst undefinedStringifiedValue = \"Не указано\";\nexport const mainTableConfig: CellConfig[] = [\n  {\n    key: \"fullname\",\n    title: \"ФИО\",\n    cellAlign: \"left\",\n    titleAlign: \"center\",\n    selector: (emp) => emp.fullname,\n    render: (value: string) => value,\n  },\n  {\n    key: \"gender\",\n    title: \"Пол\",\n    cellAlign: \"right\",\n    titleAlign: \"center\",\n    selector: (emp) => emp.gender,\n    render: (value: Gender) => {\n      if (value === Gender.Unknown) {\n        return undefinedStringifiedValue;\n      } else if (value === Gender.Male) {\n        return \"Мужской\";\n      } else {\n        return \"Женский\";\n      }\n    },\n  },\n  {\n    key: \"position\",\n    title: \"Должность\",\n    cellAlign: \"right\",\n    titleAlign: \"center\",\n    selector: (emp) => emp.position,\n    render: (value: string) => value,\n  },\n  {\n    key: \"birthday\",\n    title: \"Дата рождения\",\n    cellAlign: \"right\",\n    titleAlign: \"right\",\n    selector: (emp) => emp.birthday,\n    render: (value: Date | null) => {\n      if (isDate(value)) {\n        return format(value as Date, \"dd MMMM yyyy\", { locale: ru });\n      }\n\n      return undefinedStringifiedValue;\n    },\n  },\n  {\n    key: \"isFired\",\n    title: \"Уволен\",\n    cellAlign: \"center\",\n    titleAlign: \"right\",\n    selector: (emp) => emp.isFired,\n    render: (value: boolean) => (value ? \"Да\" : \"Нет\"),\n  },\n];\n\nexport const nestedTableConfig: CellConfig[] = [\n  {\n    key: \"fullname\",\n    title: \"ФИО\",\n    cellAlign: \"center\",\n    titleAlign: \"center\",\n    selector: (emp) => emp.fullname,\n    render: (value: string) => value,\n  },\n  {\n    key: \"position\",\n    title: \"Должность\",\n    cellAlign: \"center\",\n    titleAlign: \"center\",\n    selector: (emp) => emp.position,\n    render: (value: string) => value,\n  },\n];\n","import React, { useCallback, useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport {\n  Box,\n  Collapse,\n  IconButton,\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableRow as MuiTableRow,\n  Typography,\n} from \"@material-ui/core\";\nimport KeyboardArrowDownIcon from \"@material-ui/icons/KeyboardArrowDown\";\nimport KeyboardArrowUpIcon from \"@material-ui/icons/KeyboardArrowUp\";\n\nimport { mainTableConfig, nestedTableConfig } from \"./config\";\nimport type { StoreState } from \"store\";\nimport type { Employee, EmployeeId, EmployeeEntity } from \"store/models\";\nimport type { WithoutChildren } from \"types/children\";\n\nimport {\n  markEmployeeIdAsSelectedAction,\n  selectedEmployeeIdSelector,\n  selectDenormalizedEmployee,\n} from \"store/features/employees\";\n\nconst useRowStyles = makeStyles({\n  root: {\n    cursor: \"pointer\",\n  },\n  noGutters: {\n    paddingBottom: 0,\n    paddingTop: 0,\n  },\n});\n\ninterface TableRowProps {\n  data: EmployeeEntity;\n}\n\nfunction TableRow({ data }: WithoutChildren<TableRowProps>) {\n  const classes = useRowStyles();\n  const dispatch = useDispatch();\n\n  const currentDenormalizedEmployee = useSelector<StoreState>((state) =>\n    selectDenormalizedEmployee(state, data)\n  ) as Employee;\n\n  const selectedEmployeeId = useSelector<StoreState>((state) =>\n    selectedEmployeeIdSelector(state.employees)\n  ) as EmployeeId;\n\n  const [expanded, expand] = React.useState(false);\n\n  const toggle = useCallback(() => {\n    expand((expanded) => {\n      if (expanded) {\n        dispatch(markEmployeeIdAsSelectedAction(\"\"));\n      } else {\n        dispatch(markEmployeeIdAsSelectedAction(data));\n      }\n\n      return !expanded;\n    });\n  }, [data, dispatch]);\n\n  useEffect(() => {\n    if (selectedEmployeeId !== data.id) {\n      if (expanded) {\n        expand(false);\n      }\n    } else {\n      expand(true);\n    }\n  }, [data.id, expanded, selectedEmployeeId]);\n\n  const colleaguesKeys = Object.keys(currentDenormalizedEmployee.colleagues);\n\n  return (\n    <React.Fragment>\n      <MuiTableRow\n        className={classes.root}\n        selected={expanded}\n        hover={true}\n        onClick={toggle}\n      >\n        <TableCell>\n          <IconButton size=\"small\">\n            {expanded ? <KeyboardArrowUpIcon /> : <KeyboardArrowDownIcon />}\n          </IconButton>\n        </TableCell>\n        {mainTableConfig.map((cell) => {\n          const { selector, render } = cell;\n          return (\n            <TableCell key={cell.key} align={cell.cellAlign}>\n              {render(selector(currentDenormalizedEmployee))}\n            </TableCell>\n          );\n        })}\n      </MuiTableRow>\n      <MuiTableRow>\n        <TableCell className={classes.noGutters} colSpan={6}>\n          <Collapse in={expanded} timeout=\"auto\">\n            {expanded ? (\n              <Box margin={1}>\n                <Typography variant=\"h6\" gutterBottom component=\"div\">\n                  Коллеги\n                </Typography>\n                <Table>\n                  <TableHead>\n                    <MuiTableRow>\n                      {nestedTableConfig.map((cell) => (\n                        <TableCell key={cell.key} align={cell.titleAlign}>\n                          {cell.title}\n                        </TableCell>\n                      ))}\n                    </MuiTableRow>\n                  </TableHead>\n                  <TableBody>\n                    {colleaguesKeys.length > 0 ? (\n                      colleaguesKeys.map((colleagueKey: string) => {\n                        const colleague =\n                          currentDenormalizedEmployee.colleagues[colleagueKey];\n\n                        return (\n                          <MuiTableRow key={colleague.id}>\n                            {nestedTableConfig.map((cell) => {\n                              const { selector, render } = cell;\n                              return (\n                                <TableCell\n                                  key={cell.key}\n                                  align={cell.cellAlign}\n                                >\n                                  {render(selector(colleague))}\n                                </TableCell>\n                              );\n                            })}\n                          </MuiTableRow>\n                        );\n                      })\n                    ) : (\n                      <MuiTableRow>\n                        <TableCell\n                          component=\"th\"\n                          scope=\"row\"\n                          colSpan={2}\n                          align=\"center\"\n                        >\n                          Коллеги отсутствуют\n                        </TableCell>\n                      </MuiTableRow>\n                    )}\n                  </TableBody>\n                </Table>\n              </Box>\n            ) : null}\n          </Collapse>\n        </TableCell>\n      </MuiTableRow>\n    </React.Fragment>\n  );\n}\n\nexport { TableRow };\n","import React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport {\n  Table as MUITable,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableRow as MUITableRow,\n  Paper,\n  Box,\n  Typography,\n  makeStyles,\n} from \"@material-ui/core\";\n\nimport type { StoreState } from \"store\";\nimport type { EmployeeEntity } from \"store/models\";\nimport type { WithoutChildren } from \"types/children\";\n\nimport { mainTableConfig } from \"./config\";\nimport { TableRow } from \"./TableRow\";\nimport { selectAllEmployees } from \"store/features/employees\";\n\nconst useStyles = makeStyles(() => ({\n  listContainer: {\n    maxHeight: \"100%\",\n    overflow: \"auto\",\n  },\n}));\n\nfunction EmployeesList(props: WithoutChildren) {\n  const classes = useStyles();\n  const employees = useSelector<StoreState>((state) =>\n    selectAllEmployees(state.employees)\n  ) as EmployeeEntity[];\n\n  return (\n    <Paper className={classes.listContainer}>\n      <MUITable stickyHeader>\n        <TableHead>\n          <MUITableRow>\n            <TableCell />\n            {mainTableConfig.map((cell) => (\n              <TableCell key={cell.key} align={cell.titleAlign}>\n                {cell.title}\n              </TableCell>\n            ))}\n          </MUITableRow>\n        </TableHead>\n        <TableBody>\n          {employees.map((employee) => (\n            <TableRow key={employee.id} data={employee} />\n          ))}\n        </TableBody>\n      </MUITable>\n      {employees.length === 0 && (\n        <Box\n          display=\"flex\"\n          flexDirection=\"column\"\n          height=\"100%\"\n          padding={10}\n          justifyContent=\"center\"\n          alignItems=\"center\"\n          textAlign=\"center\"\n        >\n          <Typography variant=\"h5\">Нет данных для отображения</Typography>\n        </Box>\n      )}\n    </Paper>\n  );\n}\n\nEmployeesList.whyDidYouRender = true;\n\nexport { EmployeesList };\n","import { createAction, createReducer } from \"@reduxjs/toolkit\";\n\nimport type { EmployeeUpdate } from \"store/features/employees\";\n\nimport { ColleagueState } from \"store/models\";\nimport { EMPTY_EMPLOYEE } from \"store/models\";\n\nexport const clearPendingEmployeeAction = createAction(\"pendingEmployee/clear\");\nexport const updatePendingEmployeeAction = createAction<\n  Omit<EmployeeUpdate, \"id\">\n>(\"pendingEmployee/update\");\n\nexport const employeeInfoReducer = createReducer(EMPTY_EMPLOYEE, (builder) => {\n  builder\n    .addCase(clearPendingEmployeeAction, (state) => {\n      Object.assign(state, EMPTY_EMPLOYEE);\n    })\n    .addCase(updatePendingEmployeeAction, (state, { payload }) => {\n      const { changes } = payload;\n\n      if (\"colleagues\" in changes) {\n        const { id: colleagueId, state: colleagueState } = changes.colleagues!;\n\n        if (colleagueState === ColleagueState.Added) {\n          state.colleagues.push(colleagueId);\n        } else {\n          state.colleagues = state.colleagues.filter(\n            (id) => id !== colleagueId\n          );\n        }\n      } else {\n        Object.assign(state, changes);\n      }\n    });\n});\n","import { createContext, useContext } from \"react\";\n\nimport type { Dispatch } from \"react\";\nimport type { EmployeeEntity } from \"store/models\";\n\nimport { EMPTY_EMPLOYEE } from \"store/models\";\n\nexport type EmployeeInformationTabPanelPossibleValues =\n  | \"employeeInfo\"\n  | \"employeeColleagues\";\n\ninterface EmployeeInformationContext {\n  pendingEmployee: EmployeeEntity;\n  currentTab: EmployeeInformationTabPanelPossibleValues;\n  dispatch: Dispatch<any>;\n}\n\nconst initialState: EmployeeInformationContext = {\n  currentTab: \"employeeInfo\",\n  pendingEmployee: EMPTY_EMPLOYEE,\n  dispatch: () => {},\n};\n\nconst EmployeeInformationContext = createContext(initialState);\n\nfunction useEmployeeInformation(): EmployeeInformationContext {\n  return useContext(EmployeeInformationContext);\n}\n\nexport { EmployeeInformationContext, useEmployeeInformation };\n","import React from \"react\";\nimport { makeStyles } from \"@material-ui/core\";\n\nimport type { EmployeeInformationTabPanelPossibleValues } from \"./context\";\nimport type { WithChildren } from \"types/children\";\n\nimport { useEmployeeInformation } from \"./context\";\n\nconst useStyles = makeStyles((theme) => ({\n  tabPanelContainer: {\n    flex: 1,\n    position: \"relative\",\n  },\n  tabPanel: {\n    padding: theme.spacing(0, 0.5, 0, 0.5),\n    position: \"absolute\",\n    right: 0,\n    left: 0,\n    top: 0,\n    bottom: 0,\n  },\n}));\n\ninterface TabPanelProps {\n  name: EmployeeInformationTabPanelPossibleValues;\n}\n\nfunction TabPanel({ children, name, ...other }: WithChildren<TabPanelProps>) {\n  const classes = useStyles();\n  const { currentTab } = useEmployeeInformation();\n\n  const isHidden = currentTab !== name;\n\n  return (\n    <div className={classes.tabPanelContainer} hidden={isHidden} {...other}>\n      <div className={classes.tabPanel}>{children}</div>\n    </div>\n  );\n}\n\nexport { TabPanel };\n","import React from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport {\n  makeStyles,\n  Checkbox,\n  List,\n  ListItem,\n  ListItemIcon,\n  ListItemText,\n  Typography,\n  Box,\n  Card,\n  CardHeader,\n  Divider,\n} from \"@material-ui/core\";\n\nimport type { StoreState } from \"store\";\nimport type { Employee, EmployeeEntity } from \"store/models\";\nimport type { WithoutChildren } from \"types/children\";\n\nimport { updatePendingEmployeeAction } from \"./state\";\nimport {\n  updateEmployeeAction,\n  selectedEmployeeSelector,\n  selectAllDenormalizedEmployees,\n} from \"store/features/employees\";\nimport { ColleagueState, EMPTY_EMPLOYEE } from \"store/models\";\nimport { TabPanel } from \"./TabPanel\";\nimport { useEmployeeInformation } from \"./context\";\n\nconst useStyles = makeStyles(() => ({\n  card: {\n    height: \"100%\",\n    display: \"flex\",\n    flexDirection: \"column\",\n  },\n  cardHeader: {\n    textAlign: \"center\",\n  },\n  list: {\n    width: \"100%\",\n    overflow: \"auto\",\n    flex: 1,\n  },\n}));\n\nfunction ColleaguesTab(props: WithoutChildren) {\n  const classes = useStyles();\n  const dispatch = useDispatch();\n\n  const { pendingEmployee, dispatch: localDispatch } = useEmployeeInformation();\n\n  const selectedEmployee = useSelector<StoreState>((state) =>\n    selectedEmployeeSelector(state.employees)\n  ) as EmployeeEntity;\n\n  const employees = useSelector<StoreState>((state) =>\n    selectAllDenormalizedEmployees(state)\n  ) as Employee[];\n\n  const employeesCount = employees.length;\n  const isEditingSelectedEmployee = selectedEmployee !== EMPTY_EMPLOYEE;\n  const employee = isEditingSelectedEmployee\n    ? selectedEmployee\n    : pendingEmployee;\n\n  return (\n    <TabPanel name=\"employeeColleagues\">\n      <Card className={classes.card} elevation={0}>\n        {employeesCount > 0 ? (\n          <>\n            <CardHeader\n              className={classes.cardHeader}\n              subheader={`${employee.colleagues.length} / ${employeesCount}`}\n            />\n            <Divider />\n            <List className={classes.list}>\n              {employees.map(({ fullname, position, id: colleagueId }) => {\n                return (\n                  <ListItem key={colleagueId} component=\"li\">\n                    <ListItemIcon>\n                      <Checkbox\n                        disableRipple\n                        checked={\n                          employee.colleagues.indexOf(colleagueId) !== -1\n                        }\n                        onChange={({ target: { checked } }) => {\n                          isEditingSelectedEmployee\n                            ? dispatch(\n                                updateEmployeeAction({\n                                  id: selectedEmployee.id,\n                                  changes: {\n                                    colleagues: {\n                                      id: colleagueId,\n                                      state: checked\n                                        ? ColleagueState.Added\n                                        : ColleagueState.Removed,\n                                    },\n                                  },\n                                })\n                              )\n                            : localDispatch(\n                                updatePendingEmployeeAction({\n                                  changes: {\n                                    colleagues: {\n                                      id: colleagueId,\n                                      state: checked\n                                        ? ColleagueState.Added\n                                        : ColleagueState.Removed,\n                                    },\n                                  },\n                                })\n                              );\n                        }}\n                      />\n                    </ListItemIcon>\n                    <ListItemText primary={fullname} secondary={position} />\n                  </ListItem>\n                );\n              })}\n            </List>\n          </>\n        ) : (\n          <Box\n            display=\"flex\"\n            flexDirection=\"column\"\n            height=\"100%\"\n            justifyContent=\"center\"\n            alignItems=\"center\"\n            textAlign=\"center\"\n          >\n            <Typography variant=\"h5\">Нет данных для отображения</Typography>\n          </Box>\n        )}\n      </Card>\n    </TabPanel>\n  );\n}\n\nexport { ColleaguesTab };\n","import React from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport {\n  Grid,\n  FormControl,\n  FormLabel,\n  FormHelperText,\n  Input,\n  TextField,\n  MenuItem,\n  FormControlLabel,\n  RadioGroup,\n  Checkbox,\n  Radio,\n  Select,\n} from \"@material-ui/core\";\nimport { DatePicker } from \"@material-ui/pickers\";\n\nimport type { StoreState } from \"store\";\nimport type { EmployeeEntity, EmployeePositionEntity } from \"store/models\";\nimport type { WithoutChildren } from \"types/children\";\n\nimport { updatePendingEmployeeAction } from \"./state\";\nimport { TabPanel } from \"./TabPanel\";\nimport { useEmployeeInformation } from \"./context\";\nimport {\n  updateEmployeeAction,\n  selectedEmployeeSelector,\n} from \"store/features/employees\";\nimport { selectAllPositions } from \"store/features/positions\";\nimport { Gender, EMPTY_EMPLOYEE } from \"store/models\";\n\nfunction DescriptionTab(props: WithoutChildren) {\n  const dispatch = useDispatch();\n  const { pendingEmployee, dispatch: localDispatch } = useEmployeeInformation();\n\n  const selectedEmployee = useSelector<StoreState>((state) =>\n    selectedEmployeeSelector(state.employees)\n  ) as EmployeeEntity;\n\n  const positions = useSelector<StoreState>((state) =>\n    selectAllPositions(state.positions)\n  ) as EmployeePositionEntity[];\n\n  const isEditingSelectedEmployee = selectedEmployee !== EMPTY_EMPLOYEE;\n  const currentEmployee =\n    selectedEmployee !== EMPTY_EMPLOYEE ? selectedEmployee : pendingEmployee;\n\n  const fullnameFilled = currentEmployee.fullname.length !== 0;\n  const positionFilled = currentEmployee.position.length !== 0;\n\n  return (\n    <TabPanel name=\"employeeInfo\">\n      <Grid container spacing={3}>\n        <Grid item xs={12}>\n          <FormControl fullWidth required error={!fullnameFilled}>\n            <FormLabel>ФИО</FormLabel>\n            <Input\n              value={currentEmployee.fullname}\n              onChange={({ target: { value } }) =>\n                isEditingSelectedEmployee\n                  ? dispatch(\n                      updateEmployeeAction({\n                        id: selectedEmployee.id,\n                        changes: {\n                          fullname: value,\n                        },\n                      })\n                    )\n                  : localDispatch(\n                      updatePendingEmployeeAction({\n                        changes: {\n                          fullname: value,\n                        },\n                      })\n                    )\n              }\n            />\n          </FormControl>\n          <FormHelperText error={!fullnameFilled}>\n            Поле обязательно для ввода\n          </FormHelperText>\n        </Grid>\n        <Grid item xs={12}>\n          <FormControl fullWidth required error={!positionFilled}>\n            <FormLabel>Должность</FormLabel>\n            <Select\n              displayEmpty\n              value={currentEmployee.position}\n              onChange={({ target: { value } }) =>\n                isEditingSelectedEmployee\n                  ? dispatch(\n                      updateEmployeeAction({\n                        id: selectedEmployee.id,\n                        changes: {\n                          position: value as string,\n                        },\n                      })\n                    )\n                  : localDispatch(\n                      updatePendingEmployeeAction({\n                        changes: {\n                          position: value as string,\n                        },\n                      })\n                    )\n              }\n            >\n              {positions.map((position) => (\n                <MenuItem key={position.id} value={position.id}>\n                  {position.value}\n                </MenuItem>\n              ))}\n            </Select>\n            <FormHelperText error={!positionFilled}>\n              Поле обязательно для ввода\n            </FormHelperText>\n          </FormControl>\n        </Grid>\n        <Grid item xs={12}>\n          <FormControl fullWidth>\n            <FormLabel>День рождения</FormLabel>\n            <DatePicker\n              label=\" \"\n              disableMaskedInput\n              showDaysOutsideCurrentMonth\n              value={currentEmployee.birthday}\n              minDate={new Date(1900, 0)}\n              maxDate={new Date()}\n              onChange={(date) =>\n                isEditingSelectedEmployee\n                  ? dispatch(\n                      updateEmployeeAction({\n                        id: selectedEmployee.id,\n                        changes: {\n                          birthday: date,\n                        },\n                      })\n                    )\n                  : localDispatch(\n                      updatePendingEmployeeAction({\n                        changes: {\n                          birthday: date,\n                        },\n                      })\n                    )\n              }\n              renderInput={(props) => <TextField {...props} helperText=\"\" />}\n              inputFormat=\"dd MMMM yyyy\"\n            />\n          </FormControl>\n        </Grid>\n        <Grid item xs={12}>\n          <FormControl fullWidth>\n            <FormLabel>Пол</FormLabel>\n            <RadioGroup\n              row\n              value={currentEmployee.gender}\n              onChange={({ target: { value } }) =>\n                isEditingSelectedEmployee\n                  ? dispatch(\n                      updateEmployeeAction({\n                        id: selectedEmployee.id,\n                        changes: {\n                          gender: (+value as any) as Gender,\n                        },\n                      })\n                    )\n                  : localDispatch(\n                      updatePendingEmployeeAction({\n                        changes: { gender: (+value as any) as Gender },\n                      })\n                    )\n              }\n            >\n              <FormControlLabel\n                value={Gender.Male}\n                control={<Radio color=\"primary\" />}\n                label=\"Мужской\"\n              />\n              <FormControlLabel\n                value={Gender.Female}\n                control={<Radio color=\"primary\" />}\n                label=\"Женский\"\n              />\n            </RadioGroup>\n          </FormControl>\n        </Grid>\n        <Grid item xs={12}>\n          <FormControl fullWidth>\n            <FormControlLabel\n              label=\"Уволен\"\n              control={\n                <Checkbox\n                  checked={!!currentEmployee.isFired}\n                  onChange={({ target: { checked } }) =>\n                    isEditingSelectedEmployee\n                      ? dispatch(\n                          updateEmployeeAction({\n                            id: selectedEmployee.id,\n                            changes: {\n                              isFired: +!!checked,\n                            },\n                          })\n                        )\n                      : localDispatch(\n                          updatePendingEmployeeAction({\n                            changes: {\n                              isFired: +!!checked,\n                            },\n                          })\n                        )\n                  }\n                  color=\"primary\"\n                />\n              }\n            />\n          </FormControl>\n        </Grid>\n      </Grid>\n    </TabPanel>\n  );\n}\n\nexport { DescriptionTab };\n","import React, { memo } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { makeStyles, Paper, Button, Box } from \"@material-ui/core\";\nimport clsx from \"clsx\";\n\nimport type { StoreState } from \"store\";\nimport type { EmployeeId } from \"store/models\";\nimport type { WithoutChildren } from \"types/children\";\n\nimport {\n  updatePendingEmployeeAction,\n  clearPendingEmployeeAction,\n} from \"./state\";\nimport { EMPTY_ID, EMPTY_EMPLOYEE } from \"store/models\";\nimport { useEmployeeInformation } from \"./context\";\nimport {\n  selectedEmployeeIdSelector,\n  createEmployeeAction,\n  removeEmployeeAction,\n  markEmployeeIdAsSelectedAction,\n} from \"store/features/employees\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: \"flex\",\n    flexDirection: \"column\",\n  },\n  box: {\n    display: \"flex\",\n    justifyContent: \"space-around\",\n    padding: theme.spacing(2),\n  },\n  gutter: {\n    \"& > :first-child\": {\n      marginRight: theme.spacing(1),\n    },\n  },\n}));\n\nfunction ControlsBase(props: WithoutChildren) {\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const selectedEmployeeId = useSelector<StoreState>((state) =>\n    selectedEmployeeIdSelector(state.employees)\n  ) as EmployeeId;\n\n  const { pendingEmployee, dispatch: localDispatch } = useEmployeeInformation();\n\n  const add = () => {\n    dispatch(createEmployeeAction(pendingEmployee));\n    localDispatch(updatePendingEmployeeAction({ changes: EMPTY_EMPLOYEE }));\n  };\n\n  const remove = () => {\n    dispatch(removeEmployeeAction(selectedEmployeeId));\n  };\n\n  const clear = () => {\n    dispatch(markEmployeeIdAsSelectedAction(EMPTY_ID));\n    localDispatch(clearPendingEmployeeAction());\n  };\n\n  const canCreateEmployee =\n    !selectedEmployeeId &&\n    pendingEmployee.fullname !== \"\" &&\n    pendingEmployee.position.length !== 0;\n\n  const canClear =\n    selectedEmployeeId ||\n    pendingEmployee.fullname !== \"\" ||\n    pendingEmployee.position.length !== 0;\n\n  return (\n    <Paper className={classes.root}>\n      <Box className={clsx(classes.box, classes.gutter)}>\n        <Button\n          variant=\"contained\"\n          fullWidth\n          color=\"primary\"\n          onClick={add}\n          disabled={!canCreateEmployee}\n        >\n          Добавить\n        </Button>\n        <Button\n          variant=\"contained\"\n          color=\"secondary\"\n          fullWidth\n          disabled={!selectedEmployeeId}\n          onClick={remove}\n        >\n          Удалить\n        </Button>\n      </Box>\n      <Box className={classes.box}>\n        <Button\n          variant=\"contained\"\n          fullWidth\n          color=\"primary\"\n          onClick={clear}\n          disabled={!canClear}\n        >\n          Очистить\n        </Button>\n      </Box>\n    </Paper>\n  );\n}\n\nconst Controls = memo(ControlsBase);\n\nexport { Controls };\n","import React, { useReducer, useState } from \"react\";\nimport { makeStyles, Typography, Paper, Tab, Tabs } from \"@material-ui/core\";\n\nimport type { WithoutChildren } from \"types/children\";\nimport type { EmployeeInformationTabPanelPossibleValues } from \"./context\";\n\nimport { employeeInfoReducer } from \"./state\";\nimport { ColleaguesTab } from \"./ColleaguesTab\";\nimport { DescriptionTab } from \"./DescriptionTab\";\nimport { EmployeeInformationContext } from \"./context\";\nimport { EMPTY_EMPLOYEE } from \"store/models\";\nimport { Controls } from \"./Controls\";\n\nconst minMaxHeight = \"34rem\";\nconst useStyles = makeStyles((theme) => ({\n  infoContainer: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    minHeight: minMaxHeight,\n    maxHeight: minMaxHeight,\n    padding: theme.spacing(2),\n  },\n}));\n\nconst EmployeeInformationContextProvider = EmployeeInformationContext.Provider;\n\nfunction EmployeeInformation(props: WithoutChildren) {\n  const classes = useStyles();\n\n  const [currentTab, setCurrentTab] = useState<\n    EmployeeInformationTabPanelPossibleValues\n  >(\"employeeInfo\");\n\n  const handleTabChange = (\n    event: React.ChangeEvent<{}>,\n    newValue: EmployeeInformationTabPanelPossibleValues\n  ) => {\n    setCurrentTab(newValue);\n  };\n\n  const [pendingEmployee, dispatch] = useReducer(\n    employeeInfoReducer,\n    EMPTY_EMPLOYEE\n  );\n\n  const value: EmployeeInformationContext = {\n    dispatch,\n    currentTab,\n    pendingEmployee,\n  };\n\n  return (\n    <EmployeeInformationContextProvider value={value}>\n      <Paper className={classes.infoContainer} elevation={1}>\n        <Typography variant=\"h6\" gutterBottom>\n          Данные о сотруднике\n        </Typography>\n        <Tabs centered value={currentTab} onChange={handleTabChange}>\n          <Tab value=\"employeeInfo\" label=\"Описание\" wrapped />\n          <Tab value=\"employeeColleagues\" label=\"Коллеги\" wrapped />\n        </Tabs>\n        <DescriptionTab />\n        <ColleaguesTab />\n      </Paper>\n      <Controls />\n    </EmployeeInformationContextProvider>\n  );\n}\n\nexport { EmployeeInformation };\n","import { configureStore, getDefaultMiddleware } from \"@reduxjs/toolkit\";\nimport { reducer as employeeReducer } from \"./features/employees\";\nimport { reducer as positionReducer } from \"./features/positions\";\n\nconst store = configureStore({\n  reducer: {\n    employees: employeeReducer,\n    positions: positionReducer,\n  },\n  middleware: getDefaultMiddleware({\n    thunk: false,\n    immutableCheck: false,\n    serializableCheck: false,\n  }),\n});\n\ntype StoreState = ReturnType<typeof store.getState>;\n\nexport { store };\nexport type { StoreState };\n","import React from \"react\";\nimport DateFnsUtils from \"@material-ui/pickers/adapter/date-fns\";\nimport { ru } from \"date-fns/locale\";\nimport { Provider } from \"react-redux\";\nimport { Grid, makeStyles } from \"@material-ui/core\";\nimport { LocalizationProvider } from \"@material-ui/pickers\";\n\nimport type { WithoutChildren } from \"types/children\";\n\nimport { RandomizeButton } from \"components/RandomizeButton\";\nimport { AppHeader } from \"components/AppHeader\";\nimport { EmployeesList } from \"components/EmployeesList\";\nimport { EmployeeInformation } from \"components/EmployeeInformation\";\n\nimport { store } from \"./store\";\n\nconst useStyles = makeStyles((theme) => ({\n  container: {\n    flex: 1,\n    maxHeight: \"80%\",\n    \"& > :first-child\": {\n      paddingLeft: theme.spacing(2),\n      paddingRight: theme.spacing(2),\n    },\n    \"& > :last-child\": {\n      paddingRight: theme.spacing(2),\n    },\n  },\n  employeeListItem: {\n    maxHeight: \"100%\",\n  },\n  bottomGutter: {\n    \"& > :first-child\": {\n      marginBottom: theme.spacing(2),\n    },\n  },\n}));\n\nfunction App(props: WithoutChildren) {\n  const classes = useStyles();\n\n  return (\n    <LocalizationProvider dateAdapter={DateFnsUtils} locale={ru}>\n      <Provider store={store}>\n        <AppHeader />\n        <Grid className={classes.container} container>\n          <Grid className={classes.employeeListItem} item xs={12} sm={8}>\n            <EmployeesList />\n          </Grid>\n          <Grid className={classes.bottomGutter} item xs={12} sm={4}>\n            <EmployeeInformation />\n          </Grid>\n        </Grid>\n        <RandomizeButton />\n      </Provider>\n    </LocalizationProvider>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { CssBaseline, ThemeProvider, createMuiTheme } from \"@material-ui/core\";\n\nimport App from \"./App\";\n\nconst containerSelector = \"root\";\n\nconst fullscreen = { width: \"100%\", height: \"100%\" };\nconst baseTheme = createMuiTheme({\n  overrides: {\n    MuiCssBaseline: {\n      \"@global\": {\n        html: { ...fullscreen },\n        body: { ...fullscreen },\n        [\"#\" + containerSelector]: {\n          ...fullscreen,\n          display: \"flex\",\n          flexDirection: \"column\",\n        },\n      },\n    },\n  },\n});\n\nfunction AppContainer() {\n  return (\n    <ThemeProvider theme={baseTheme}>\n      <CssBaseline />\n      <App />\n    </ThemeProvider>\n  );\n}\n\nReactDOM.render(<AppContainer />, document.getElementById(containerSelector));\n"],"sourceRoot":""}